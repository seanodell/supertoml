name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            artifact_name: supertoml-darwin-amd64
            packaging:
              - homebrew
              - mise
              - asdf
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            artifact_name: supertoml-darwin-arm64
            packaging:
              - homebrew
              - mise
              - asdf

          # Windows
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
            artifact_name: supertoml-windows-amd64
            packaging:
              - chocolatey
              - winget
              - scoop

          # Linux
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            artifact_name: supertoml-linux-amd64
            packaging:
              - apt
              - yum
              - pacman
              - mise
              - asdf
          - os: ubuntu-24.04-arm
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            artifact_name: supertoml-linux-arm64
            packaging:
              - apt
              - yum
              - pacman
              - mise
              - asdf
          - os: ubuntu-latest
            arch: x86
            target: i686-unknown-linux-gnu
            artifact_name: supertoml-linux-386
            packaging:
              - apt
              - yum
              - pacman
              - mise
              - asdf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation dependencies
        if: matrix.target == 'i686-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.target }}" == "i686-unknown-linux-gnu" ]]; then
            # Install multilib for i686 cross-compilation
            sudo apt-get install -y gcc-multilib
          elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            # Install x86_64 cross-compilation tools
            sudo apt-get install -y gcc-x86-64-linux-gnu
          fi

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Extract version
        id: cargo_version
        shell: bash
        run: |
          VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Build release binary
        shell: bash
        run: |
          # Set up cross-compilation environment for cross-compiled targets
          if [[ "${{ matrix.target }}" == "i686-unknown-linux-gnu" ]]; then
            export CC_i686_unknown_linux_gnu=gcc
            export CXX_i686_unknown_linux_gnu=g++
            export CFLAGS_i686_unknown_linux_gnu="-m32"
            export CXXFLAGS_i686_unknown_linux_gnu="-m32"
            export CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=gcc
          elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            export CC_x86_64_unknown_linux_gnu=x86_64-linux-gnu-gcc
            export CXX_x86_64_unknown_linux_gnu=x86_64-linux-gnu-g++
            export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}
          # Strip debug symbols to reduce binary size
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            strip target/${{ matrix.target }}/release/supertoml
          fi

      - name: Package binary
        shell: bash
        run: |
          # Create packages directory
          mkdir -p packages

          # Create both zip and tar.gz packages for all platforms
          echo "Creating packages for: ${{ matrix.artifact_name }} v${{ steps.cargo_version.outputs.version }}"

          # Create zip package
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Use PowerShell for Windows
            powershell -Command "Compress-Archive -Path 'target/${{ matrix.target }}/release/supertoml.exe' -DestinationPath 'packages/supertoml-${{ steps.cargo_version.outputs.version }}-${{ matrix.artifact_name }}.zip' -Force"
          else
            # Use zip for Unix systems
            zip -j "packages/supertoml-${{ steps.cargo_version.outputs.version }}-${{ matrix.artifact_name }}.zip" "target/${{ matrix.target }}/release/supertoml"
          fi

          # Create tar.gz package
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Use tar (available on Windows 10+ and GitHub runners)
            tar -czf "packages/supertoml-${{ steps.cargo_version.outputs.version }}-${{ matrix.artifact_name }}.tar.gz" -C "target/${{ matrix.target }}/release" supertoml.exe
          else
            tar -czf "packages/supertoml-${{ steps.cargo_version.outputs.version }}-${{ matrix.artifact_name }}.tar.gz" -C "target/${{ matrix.target }}/release" supertoml
          fi

          echo "Created packages:"
          ls -la packages/

      - name: Run tests
        shell: bash
        run: |
          # Set up cross-compilation environment for cross-compiled targets
          if [[ "${{ matrix.target }}" == "i686-unknown-linux-gnu" ]]; then
            export CC_i686_unknown_linux_gnu=gcc
            export CXX_i686_unknown_linux_gnu=g++
            export CFLAGS_i686_unknown_linux_gnu="-m32"
            export CXXFLAGS_i686_unknown_linux_gnu="-m32"
            export CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=gcc
          elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            export CC_x86_64_unknown_linux_gnu=x86_64-linux-gnu-gcc
            export CXX_x86_64_unknown_linux_gnu=x86_64-linux-gnu-g++
            export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc
          fi

          cargo test --target ${{ matrix.target }}

      - name: Test release binary
        shell: bash
        run: |
          # Test the actual release binary that will be uploaded
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows binary
            ./target/${{ matrix.target }}/release/supertoml.exe --help
            echo '[test]' > test.toml
            echo 'value = "hello"' >> test.toml
            echo 'number = 42' >> test.toml
            ./target/${{ matrix.target }}/release/supertoml.exe test.toml test
          else
            # Unix-like systems (macOS, Linux)
            ./target/${{ matrix.target }}/release/supertoml --help
            echo '[test]' > test.toml
            echo 'value = "hello"' >> test.toml
            echo 'number = 42' >> test.toml
            ./target/${{ matrix.target }}/release/supertoml test.toml test
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: packages/
          exclude: "*.d *.pdb"

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages/

      - name: List downloaded files
        run: |
          echo "All files in packages directory:"
          find packages/ -type f

      - name: Extract version from Cargo.toml
        id: cargo_version
        run: |
          VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Extract release notes from CHANGELOG
        id: changelog
        run: |
          VERSION="${{ steps.cargo_version.outputs.version }}"
          # Extract the section for this version from CHANGELOG.md
          # Look for the version header and extract everything until the next version or end of file
          awk "/^## \[$VERSION\]/ {flag=1; next} /^## \[/ && flag {flag=0} flag" CHANGELOG.md > release_notes.md

          # Check if we found any content
          if [ -s release_notes.md ]; then
            echo "Found release notes for version $VERSION"
            cat release_notes.md
          else
            echo "No release notes found for version $VERSION, using default"
            echo "Release v$VERSION" > release_notes.md
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          target_commitish: ${{ github.sha }}
          tag_name: v${{ steps.cargo_version.outputs.version }}
          name: Release v${{ steps.cargo_version.outputs.version }}
          body_path: release_notes.md
          files: packages/**/*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
